{"ast":null,"code":"export const createCode = colors => {\n  let code = \"\";\n  while (code.length <= 3) {\n    let rand = Math.floor(Math.random() * colors.length);\n    if (!code.includes(colors[rand])) {\n      code += colors[rand];\n    }\n  }\n  return code;\n};\nexport const translateCode = code => {\n  let translatedCode = [];\n  for (let i = 0; i < code.length; i++) {\n    switch (code[i]) {\n      case \"b\":\n        translatedCode.push(\"blue\");\n        break;\n      case \"w\":\n        translatedCode.push(\"white\");\n        break;\n      case \"g\":\n        translatedCode.push(\"green\");\n        break;\n      case \"r\":\n        translatedCode.push(\"red\");\n        break;\n      case \"y\":\n        translatedCode.push(\"yellow\");\n        break;\n      case \"o\":\n        translatedCode.push(\"orange\");\n        break;\n    }\n  }\n  return translatedCode;\n};\nexport const changeColor = style => {\n  switch (style) {\n    case 'blue':\n      return 'white';\n    case 'white':\n      return 'green';\n    case 'green':\n      return 'red';\n    case 'red':\n      return 'yellow';\n    case 'yellow':\n      return 'orange';\n    case 'orange':\n      return 'blue';\n    default:\n      return 'blue';\n  }\n};\nexport const checkGameStatus = (guess, code) => {\n  if (JSON.stringify(guess) === JSON.stringify(code)) {\n    return true;\n  }\n  let w = [];\n  let b = [];\n  for (let i = 0; i < code.length; i++) {\n    if (code.includes(guess[i])) {\n      w.push(\"w\");\n    }\n    if (guess[i] === code[i]) {\n      b.push(\"b\");\n    }\n  }\n  //if we have blacks, we dont need to count them as whites as well\n  for (let i = 0; i < b.length; i++) {\n    w.pop();\n  }\n  let wandb = b.concat(w);\n  //add blank blocks to the response\n  while (wandb.length != 4) {\n    wandb.push(\"\");\n  }\n};\nexport const calculateScore = (time, guesses) => {\n  return Math.round(1 / (time * guesses) * 100) * 1000;\n};\n// const validate = (guess, code) => {\n//     let validateGuess = \"\"\n//         if(guess.length != code.length){\n//             console.log(\"Guess was too long or too short, try again: \")\n//             return false\n//         }\n//         for(let i = 0; i < guess.length; i++){\n//             if(!colors.includes(guess[i])){\n//                 console.log(\"Please use proper color codes, try again: \")\n//                 return false\n//             }\n//             if(validateGuess.includes(guess[i])){\n//                 console.log(\"Please do not repeat a color, try again: \")\n//                 return false\n//             }\n//             validateGuess += guess[i]\n//         }\n//     return true\n// }\n// const game = (code) => {\n//     let tries = 10\n//     console.log(\"Guess the 4 digit code using the first characters from the following colors. (Blue(b), White(w), Green(g), Red(r), Yellow(y), and Orange(o)). \")\n//     console.log(\"Letters cannot be repeated in the guess or in the code. 10 TRIES!\")\n//     let guess = prompt(\"Guess: \").trim()\n//     if(guess == \"exit\"){\n//         clearTimeout()\n//     }\n//     while(guess != code){\n//         let whites = 0\n//         let blacks = 0\n\n//         while(validate(guess, code) == false){\n//             guess = prompt(\"Try Again: \")\n//         }\n\n//         for(let i = 0; i < code.length; i++){\n//             if(guess.includes(code[i])){\n//                 whites++\n//             }\n//             if(guess[i] === code[i]){\n//                 blacks++\n//             }\n//         }\n//         //if we have blacks, we dont need to count them as whites as well\n//         whites = whites - blacks\n//         tries--\n//         console.log(\"Whites: \" + whites)\n//         console.log(\"Blacks: \" + blacks)\n//         if(tries === 0){\n//             console.log(\"Sorry, you didn't guess the code in 10 tries!\")\n//             console.log(\"The code was \" + code + \", \" + translateCode(code))\n//             return\n//         }\n//         console.log(\"Tries left: \" + tries)\n//         guess = prompt(\"Guess: \").trim()\n//     }\n//     console.log(\"Congrats you guessed \" + translateCode(code))\n//     return\n// }","map":{"version":3,"names":["createCode","colors","code","length","rand","Math","floor","random","includes","translateCode","translatedCode","i","push","changeColor","style","checkGameStatus","guess","JSON","stringify","w","b","pop","wandb","concat","calculateScore","time","guesses","round"],"sources":["/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/game.js"],"sourcesContent":["export const createCode = (colors) => {\n    let code = \"\"\n    while(code.length <= 3){\n        let rand = Math.floor(Math.random() * colors.length)\n        if(!code.includes(colors[rand])){\n            code += colors[rand]\n        }\n    }\n    return code\n}\n\nexport const translateCode = (code) => {\n    let translatedCode = []\n    for(let i = 0; i < code.length; i++){\n        switch(code[i]){\n            case \"b\":\n                translatedCode.push(\"blue\")\n                break;\n            case \"w\":\n                translatedCode.push(\"white\")\n                break;\n            case \"g\":\n                translatedCode.push(\"green\")\n                break;\n            case \"r\":\n                translatedCode.push(\"red\")\n                break;\n            case \"y\":\n                translatedCode.push(\"yellow\")\n                break;\n            case \"o\":\n                translatedCode.push(\"orange\")\n                break;\n        }\n    }\n    return translatedCode\n}\nexport const changeColor = (style) => {\n    switch(style){\n        case 'blue':\n            return 'white'\n        case 'white':\n            return 'green'\n        case 'green':\n            return 'red'\n        case 'red':\n            return 'yellow'\n        case 'yellow':\n            return 'orange'\n        case 'orange':\n            return 'blue'\n        default:\n            return 'blue'\n        }\n}\nexport const checkGameStatus = (guess, code) => {\n    if(JSON.stringify(guess) === JSON.stringify(code)){\n        return true\n    }\n    let w = []\n    let b = []\n\n    for(let i = 0; i < code.length; i++){\n            if(code.includes(guess[i])){\n                w.push(\"w\")\n            }\n            if(guess[i] === code[i]){\n                b.push(\"b\")\n            }\n        }\n            //if we have blacks, we dont need to count them as whites as well\n            for(let i = 0; i < b.length; i++){\n                w.pop()\n            }\n            let wandb = b.concat(w)\n            //add blank blocks to the response\n            while(wandb.length != 4){\n                wandb.push(\"\")\n            }\n\n}\nexport const calculateScore = (time, guesses) => {\n    return Math.round(1 / ((time * guesses)) * 100) * 1000\n}\n// const validate = (guess, code) => {\n//     let validateGuess = \"\"\n//         if(guess.length != code.length){\n//             console.log(\"Guess was too long or too short, try again: \")\n//             return false\n//         }\n//         for(let i = 0; i < guess.length; i++){\n//             if(!colors.includes(guess[i])){\n//                 console.log(\"Please use proper color codes, try again: \")\n//                 return false\n//             }\n//             if(validateGuess.includes(guess[i])){\n//                 console.log(\"Please do not repeat a color, try again: \")\n//                 return false\n//             }\n//             validateGuess += guess[i]\n//         }\n//     return true\n// }\n// const game = (code) => {\n//     let tries = 10\n//     console.log(\"Guess the 4 digit code using the first characters from the following colors. (Blue(b), White(w), Green(g), Red(r), Yellow(y), and Orange(o)). \")\n//     console.log(\"Letters cannot be repeated in the guess or in the code. 10 TRIES!\")\n//     let guess = prompt(\"Guess: \").trim()\n//     if(guess == \"exit\"){\n//         clearTimeout()\n//     }\n//     while(guess != code){\n//         let whites = 0\n//         let blacks = 0\n        \n//         while(validate(guess, code) == false){\n//             guess = prompt(\"Try Again: \")\n//         }\n\n//         for(let i = 0; i < code.length; i++){\n//             if(guess.includes(code[i])){\n//                 whites++\n//             }\n//             if(guess[i] === code[i]){\n//                 blacks++\n//             }\n//         }\n//         //if we have blacks, we dont need to count them as whites as well\n//         whites = whites - blacks\n//         tries--\n//         console.log(\"Whites: \" + whites)\n//         console.log(\"Blacks: \" + blacks)\n//         if(tries === 0){\n//             console.log(\"Sorry, you didn't guess the code in 10 tries!\")\n//             console.log(\"The code was \" + code + \", \" + translateCode(code))\n//             return\n//         }\n//         console.log(\"Tries left: \" + tries)\n//         guess = prompt(\"Guess: \").trim()\n//     }\n//     console.log(\"Congrats you guessed \" + translateCode(code))\n//     return\n// }\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}