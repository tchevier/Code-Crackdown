{"ast":null,"code":"var _jsxFileName = \"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Game.jsx\",\n  _s = $RefreshSig$();\nimport { createCode, translateCode, calculateScore } from '../game';\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport GuessGrid from \"./GuessGrid\";\nimport { updateUserById } from '../services/internalApiService';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const location = useLocation();\n  const [currentUser, setCurrentUser] = useState(location.state.currentUser);\n  const [time, setTime] = useState(0);\n  let colors = \"bwgryo\";\n  const [code, setCode] = useState(\"\");\n  const [numGuesses, setNumGuesses] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [previousGuess, setPreviousGuess] = useState([]);\n  const [approveScore, setApproveScore] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    //create the code to be guessed\n    const newCode = createCode(colors);\n    setCode(translateCode(newCode));\n    const interval = setInterval(() => {\n      setTime(prevTime => {\n        if (gameOver === true) {\n          const score = calculateScore(prevTime, numGuesses);\n          clearInterval(interval);\n          //if a user is logged in, add score to their total\n          updateScore(currentUser, score);\n          setScore(score);\n          return prevTime;\n        }\n        return prevTime + 1;\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [gameOver]);\n  const updateScore = (currentUser, score) => {\n    updateUserById(currentUser.id, {\n      score: currentUser.score += score\n    }).then(data => {\n      console.log(data);\n    });\n  };\n  const reset = () => {\n    // reset all states in game.jsx\n    setTime(0);\n    setNumGuesses(0);\n    setGameOver(false);\n    setScore(0);\n    setPreviousGuess([]);\n    setApproveScore(true);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [console.log(currentUser), console.log(code), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex align-items-center justify-content-center gap-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"timer\",\n        className: \"info\",\n        children: [\"TIMER: \", time]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"info\",\n        children: [\"GUESSES: \", numGuesses]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), score !== 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"info\",\n      children: [\"SCORE: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main-container\",\n      children: /*#__PURE__*/_jsxDEV(GuessGrid, {\n        code: code,\n        previousGuess: previousGuess,\n        handleGameOver: () => setGameOver(true),\n        gameOver: gameOver,\n        numGuesses: () => setNumGuesses(numGuesses + 1),\n        reset: reset,\n        currentUser: currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"T4LC34BiK3563jVWc3kUzfonvXQ=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["createCode","translateCode","calculateScore","React","useState","useEffect","useNavigate","useLocation","GuessGrid","updateUserById","Game","location","currentUser","setCurrentUser","state","time","setTime","colors","code","setCode","numGuesses","setNumGuesses","gameOver","setGameOver","score","setScore","previousGuess","setPreviousGuess","approveScore","setApproveScore","navigate","newCode","interval","setInterval","prevTime","clearInterval","updateScore","id","then","data","console","log","reset"],"sources":["/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Game.jsx"],"sourcesContent":["import {createCode, translateCode, calculateScore} from '../game'\nimport React, { useState, useEffect } from \"react\"\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport GuessGrid from \"./GuessGrid\"\nimport { updateUserById } from '../services/internalApiService'\n\n\n\nconst Game = () => {\n    const location = useLocation()\n    const [currentUser, setCurrentUser] = useState(location.state.currentUser)\n    const [time, setTime] = useState(0)\n    let colors = \"bwgryo\"\n    const [code, setCode] = useState(\"\")\n    const [numGuesses, setNumGuesses] = useState(0)\n    const [gameOver, setGameOver] = useState(false)\n    const [score, setScore] = useState(0)\n    const [previousGuess, setPreviousGuess] = useState([])\n    const [approveScore, setApproveScore] = useState(true)\n    const navigate = useNavigate()\n    useEffect(() => {\n\n        //create the code to be guessed\n        const newCode = createCode(colors)\n        setCode(translateCode(newCode))\n        const interval = setInterval(() => {\n            setTime((prevTime) => {\n                if (gameOver === true) {\n                    const score = calculateScore(prevTime, numGuesses)\n                    clearInterval(interval);\n                    //if a user is logged in, add score to their total\n                    updateScore(currentUser, score)\n                    setScore(score)\n                    return prevTime\n                  }\n              return prevTime + 1\n            });\n           \n          }, 1000);\n          return () => clearInterval(interval);\n    \n    }, [gameOver])\n\n    const updateScore = (currentUser, score) => {\n            updateUserById(currentUser.id, {\n                score: currentUser.score += score\n            })\n            .then(data => {\n                console.log(data)\n            })\n    }\n\n    const reset = () => {\n        // reset all states in game.jsx\n        setTime(0)\n        setNumGuesses(0)\n        setGameOver(false)\n        setScore(0)\n        setPreviousGuess([])\n        setApproveScore(true)\n    }\n    return (\n        <>\n        {\n            console.log(currentUser)\n        }\n        {\n            console.log(code)\n        }\n        \n        <div className=\"d-flex align-items-center justify-content-center gap-5\">\n            <button onClick={() => navigate('/')}>Back</button>\n                <h2 id=\"timer\" className=\"info\">TIMER: {time}</h2>\n                <h2 className=\"info\">GUESSES: {numGuesses}</h2>\n            </div>\n            {\n                score !== 0 && (\n                    <h2 className=\"info\">SCORE: {score}</h2>\n                )\n            }\n            <div id='main-container'>\n                {\n                    //code = send code to guessgrid, previousGuess = send the previous guess styles to fill the containers with so the player can see what they guessed previously, handleGameOver = when player guesses correctly we need to setGameOver to true in the game.jsx so the timer can stop and we can calculate the score, gameOver = determines whether guessgrid displays the restart button and shows the unlock button or not, numGuesses = pass the num of guesses up to game.jsx to display at top of screen, reset = reset game.jsx state and guessgrid.jsx state, currentUser = pass the user through props so it doesn't get lost in running the game\n                } \n                <GuessGrid code={code} previousGuess={previousGuess} handleGameOver={() => setGameOver(true)} gameOver={gameOver} numGuesses={() => setNumGuesses(numGuesses + 1)} reset={reset} currentUser={currentUser}></GuessGrid>\n            </div>\n        </>\n    )\n}\nexport default Game"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}