{"ast":null,"code":"var _jsxFileName = \"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Game.jsx\",\n  _s = $RefreshSig$();\nimport { createCode, translateCode, calculateScore } from '../game';\nimport React, { useState, useEffect } from \"react\";\nimport GuessGrid from \"./GuessGrid\";\nimport { updateUserById } from '../services/internalApiService';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = props => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(props.currentUser);\n  const [time, setTime] = useState(0);\n  let colors = \"bwgryo\";\n  const [code, setCode] = useState(\"\");\n  const [numGuesses, setNumGuesses] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [previousGuess, setPreviousGuess] = useState([]);\n  useEffect(() => {\n    console.log(props);\n    //create the code to be guessed\n    const newCode = createCode(colors);\n    setCode(translateCode(newCode));\n    const interval = setInterval(() => {\n      setTime(prevTime => {\n        if (gameOver === true) {\n          clearInterval(interval);\n          setScore(calculateScore(prevTime, numGuesses));\n          //if a user is logged in, add score to their total\n          currentUser.username && updateUserById(currentUser.id, {\n            score: currentUser.score += score\n          }).then();\n          return prevTime;\n        }\n        return prevTime + 1;\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [gameOver]);\n  const reset = () => {\n    // reset all states in game.jsx\n    setTime(0);\n    setNumGuesses(0);\n    setGameOver(false);\n    setScore(0);\n    setPreviousGuess([]);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [console.log(code), console.log(props, \" USERNAME\"), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex align-items-center justify-content-center gap-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"timer\",\n        className: \"info\",\n        children: [\"TIMER: \", time]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"info\",\n        children: [\"GUESSES: \", numGuesses]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), score !== 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"info\",\n      children: [\"SCORE: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main-container\",\n      children: /*#__PURE__*/_jsxDEV(GuessGrid, {\n        code: code,\n        previousGuess: previousGuess,\n        handleGameOver: () => setGameOver(true),\n        gameOver: gameOver,\n        numGuesses: () => setNumGuesses(numGuesses + 1),\n        reset: reset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"Lc7UuUEd7JmtE8NBvP+Y3PhcdbM=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["createCode","translateCode","calculateScore","React","useState","useEffect","GuessGrid","updateUserById","Game","props","currentUser","setCurrentUser","time","setTime","colors","code","setCode","numGuesses","setNumGuesses","gameOver","setGameOver","score","setScore","previousGuess","setPreviousGuess","console","log","newCode","interval","setInterval","prevTime","clearInterval","username","id","then","reset"],"sources":["/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Game.jsx"],"sourcesContent":["import {createCode, translateCode, calculateScore} from '../game'\nimport React, { useState, useEffect } from \"react\"\nimport GuessGrid from \"./GuessGrid\"\nimport { updateUserById } from '../services/internalApiService'\n\n\nconst Game = (props) => {\n    const [currentUser, setCurrentUser] = useState(props.currentUser)\n    const [time, setTime] = useState(0)\n    let colors = \"bwgryo\"\n    const [code, setCode] = useState(\"\")\n    const [numGuesses, setNumGuesses] = useState(0)\n    const [gameOver, setGameOver] = useState(false)\n    const [score, setScore] = useState(0)\n    const [previousGuess, setPreviousGuess] = useState([])\n    useEffect(() => {\n        console.log(props)\n        //create the code to be guessed\n        const newCode = createCode(colors)\n        setCode(translateCode(newCode))\n        const interval = setInterval(() => {\n            setTime((prevTime) => {\n                if (gameOver === true) {\n                    clearInterval(interval);\n                    setScore(calculateScore(prevTime, numGuesses))\n                    //if a user is logged in, add score to their total\n                    currentUser.username && (\n                        updateUserById(currentUser.id, {\n                            score: currentUser.score += score\n                        })\n                        .then()\n                    ) \n                    return prevTime\n                  }\n              return prevTime + 1\n            });\n           \n          }, 1000);\n          return () => clearInterval(interval);\n    \n    }, [gameOver])\n\n    const reset = () => {\n        // reset all states in game.jsx\n        setTime(0)\n        setNumGuesses(0)\n        setGameOver(false)\n        setScore(0)\n        setPreviousGuess([])\n    }\n    return (\n        <>\n        {\n            console.log(code)\n        }\n        {\n            console.log(props, \" USERNAME\")\n        }\n        <div className=\"d-flex align-items-center justify-content-center gap-5\">\n                <h2 id=\"timer\" className=\"info\">TIMER: {time}</h2>\n                <h2 className=\"info\">GUESSES: {numGuesses}</h2>\n            </div>\n            {\n                score !== 0 && (\n                    <h2 className=\"info\">SCORE: {score}</h2>\n                )\n            }\n            <div id='main-container'>\n                {\n                    //code = send code to guessgrid, previousGuess = send the previous guess styles to fill the containers with so the player can see what they guessed previously, handleGameOver = when player guesses correctly we need to setGameOver to true in the game.jsx so the timer can stop and we can calculate the score, gameOver = determines whether guessgrid displays the restart button and shows the unlock button or not, numGuesses = pass the num of guesses up to game.jsx to display at top of screen, reset = reset game.jsx state and guessgrid.jsx state\n                } \n                <GuessGrid code={code} previousGuess={previousGuess} handleGameOver={() => setGameOver(true)} gameOver={gameOver} numGuesses={() => setNumGuesses(numGuesses + 1)} reset={reset}></GuessGrid>\n            </div>\n        </>\n    )\n}\nexport default Game"],"mappings":";;AAAA,SAAQA,UAAU,EAAEC,aAAa,EAAEC,cAAc,QAAO,SAAS;AACjE,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,cAAc,QAAQ,gCAAgC;AAAA;AAAA;AAG/D,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAA;EACpB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAACK,KAAK,CAACC,WAAW,CAAC;EACjE,MAAM,CAACE,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACnC,IAAIU,MAAM,GAAG,QAAQ;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtDC,SAAS,CAAC,MAAM;IACZoB,OAAO,CAACC,GAAG,CAACjB,KAAK,CAAC;IAClB;IACA,MAAMkB,OAAO,GAAG3B,UAAU,CAACc,MAAM,CAAC;IAClCE,OAAO,CAACf,aAAa,CAAC0B,OAAO,CAAC,CAAC;IAC/B,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BhB,OAAO,CAAEiB,QAAQ,IAAK;QAClB,IAAIX,QAAQ,KAAK,IAAI,EAAE;UACnBY,aAAa,CAACH,QAAQ,CAAC;UACvBN,QAAQ,CAACpB,cAAc,CAAC4B,QAAQ,EAAEb,UAAU,CAAC,CAAC;UAC9C;UACAP,WAAW,CAACsB,QAAQ,IAChBzB,cAAc,CAACG,WAAW,CAACuB,EAAE,EAAE;YAC3BZ,KAAK,EAAEX,WAAW,CAACW,KAAK,IAAIA;UAChC,CAAC,CAAC,CACDa,IAAI,EACR;UACD,OAAOJ,QAAQ;QACjB;QACJ,OAAOA,QAAQ,GAAG,CAAC;MACrB,CAAC,CAAC;IAEJ,CAAC,EAAE,IAAI,CAAC;IACR,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EAE1C,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;EAEd,MAAMgB,KAAK,GAAG,MAAM;IAChB;IACAtB,OAAO,CAAC,CAAC,CAAC;IACVK,aAAa,CAAC,CAAC,CAAC;IAChBE,WAAW,CAAC,KAAK,CAAC;IAClBE,QAAQ,CAAC,CAAC,CAAC;IACXE,gBAAgB,CAAC,EAAE,CAAC;EACxB,CAAC;EACD,oBACI;IAAA,WAEIC,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC,EAGjBU,OAAO,CAACC,GAAG,CAACjB,KAAK,EAAE,WAAW,CAAC,eAEnC;MAAK,SAAS,EAAC,wDAAwD;MAAA,wBAC/D;QAAI,EAAE,EAAC,OAAO;QAAC,SAAS,EAAC,MAAM;QAAA,WAAC,SAAO,EAACG,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM,eAClD;QAAI,SAAS,EAAC,MAAM;QAAA,WAAC,WAAS,EAACK,UAAU;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM;IAAA;MAAA;MAAA;MAAA;IAAA,QAC7C,EAEFI,KAAK,KAAK,CAAC,iBACP;MAAI,SAAS,EAAC,MAAM;MAAA,WAAC,SAAO,EAACA,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QACrC,eAEL;MAAK,EAAE,EAAC,gBAAgB;MAAA,uBAIpB,QAAC,SAAS;QAAC,IAAI,EAAEN,IAAK;QAAC,aAAa,EAAEQ,aAAc;QAAC,cAAc,EAAE,MAAMH,WAAW,CAAC,IAAI,CAAE;QAAC,QAAQ,EAAED,QAAS;QAAC,UAAU,EAAE,MAAMD,aAAa,CAACD,UAAU,GAAG,CAAC,CAAE;QAAC,KAAK,EAAEkB;MAAM;QAAA;QAAA;QAAA;MAAA;IAAa;MAAA;MAAA;MAAA;IAAA,QAC3L;EAAA,gBACP;AAEX,CAAC;AAAA,GArEK3B,IAAI;AAAA,KAAJA,IAAI;AAsEV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}