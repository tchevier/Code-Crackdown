[{"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/index.js":"1","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/App.js":"2","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/reportWebVitals.js":"3","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/game.js":"4","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/services/internalApiService.js":"5","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Game/Game.jsx":"6","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Game/GuessGrid.jsx":"7","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Menu/Menu.jsx":"8","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Menu/Leaderboard.jsx":"9","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Menu/Help.jsx":"10","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Forms/Login.jsx":"11","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Forms/Register.jsx":"12","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/SVGs/MenuButtonSVG.jsx":"13"},{"size":392,"mtime":1675375669875,"results":"14","hashOfConfig":"15"},{"size":610,"mtime":1675375603457,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1672511560409,"results":"17","hashOfConfig":"15"},{"size":2236,"mtime":1675375232134,"results":"18","hashOfConfig":"15"},{"size":806,"mtime":1675275286787,"results":"19","hashOfConfig":"15"},{"size":3794,"mtime":1675376998857,"results":"20","hashOfConfig":"15"},{"size":6801,"mtime":1675375464584,"results":"21","hashOfConfig":"15"},{"size":3752,"mtime":1675381220460,"results":"22","hashOfConfig":"15"},{"size":1234,"mtime":1675383679168,"results":"23","hashOfConfig":"15"},{"size":3543,"mtime":1675379722511,"results":"24","hashOfConfig":"15"},{"size":3444,"mtime":1675377134654,"results":"25","hashOfConfig":"15"},{"size":3290,"mtime":1675377172964,"results":"26","hashOfConfig":"15"},{"size":2490,"mtime":1674961482241,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"ky4dyl",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"31"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/index.js",[],[],[],"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/App.js",["72"],[],"import Menu from './components/Menu/Menu';\nimport { Route, Routes } from 'react-router-dom'\nimport Register from './components/Forms/Register';\nimport Leaderboard from './components/Menu/Leaderboard'\nimport Login from './components/Forms/Login';\nimport Game from './components/Game/Game';\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Routes>\n      <Route path=\"/\" element={<Menu />}/>\n      <Route path=\"/game\" element={<Game />} />\n      <Route path=\"/register\" element={<Register />} />\n      <Route path=\"/login\" element={<Login />} /> \n    </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/reportWebVitals.js",[],[],"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/game.js",["73","74"],[],"export const createCode = (colors) => {\n    let code = \"\"\n    while(code.length <= 3){\n        let rand = Math.floor(Math.random() * colors.length)\n        if(!code.includes(colors[rand])){\n            code += colors[rand]\n        }\n    }\n    return code\n}\n\nexport const translateCode = (code) => {\n    let translatedCode = []\n    for(let i = 0; i < code.length; i++){\n        switch(code[i]){\n            case \"b\":\n                translatedCode.push(\"blue\")\n                break;\n            case \"w\":\n                translatedCode.push(\"white\")\n                break;\n            case \"g\":\n                translatedCode.push(\"green\")\n                break;\n            case \"r\":\n                translatedCode.push(\"red\")\n                break;\n            case \"y\":\n                translatedCode.push(\"yellow\")\n                break;\n            case \"o\":\n                translatedCode.push(\"orange\")\n                break;\n        }\n    }\n    return translatedCode\n}\nexport const changeColor = (style) => {\n    switch(style){\n        case 'blue':\n            return 'white'\n        case 'white':\n            return 'green'\n        case 'green':\n            return 'red'\n        case 'red':\n            return 'yellow'\n        case 'yellow':\n            return 'orange'\n        case 'orange':\n            return 'blue'\n        default:\n            return 'blue'\n        }\n}\nexport const checkGameStatus = (guess, code) => {\n    if(JSON.stringify(guess) === JSON.stringify(code)){\n        return true\n    }\n    let w = []\n    let b = []\n\n    for(let i = 0; i < code.length; i++){\n            if(code.includes(guess[i])){\n                w.push(\"w\")\n            }\n            if(guess[i] === code[i]){\n                b.push(\"b\")\n            }\n        }\n        //if we have blacks, we dont need to count them as whites as well\n        for(let i = 0; i < b.length; i++){\n            w.pop()\n        }\n        let wandb = b.concat(w)\n        //add blank blocks to the response\n        while(wandb.length != 4){\n            wandb.push(\"\")\n        }\n        //return the list of whites and blacks\n        return wandb\n\n}\nexport const calculateScore = (time, guesses) => {\n    return Math.round(1 / ((time * guesses)) * 100) * 1000\n}","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/services/internalApiService.js",[],[],"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Game/Game.jsx",["75","76"],[],"import {createCode, translateCode, calculateScore} from '../../game'\nimport React, { useState, useEffect } from \"react\"\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport GuessGrid from \"./GuessGrid\"\nimport { updateUserById } from '../../services/internalApiService'\nimport MenuButtonSVG from '../SVGs/MenuButtonSVG'\n\n\nconst Game = () => {\n    const location = useLocation()\n    const [currentUser, setCurrentUser] = useState(location.state.currentUser)\n    const [time, setTime] = useState(0)\n    let colors = \"bwgryo\"\n    const [code, setCode] = useState(\"\")\n    const [numGuesses, setNumGuesses] = useState(0)\n    const [gameOver, setGameOver] = useState(false)\n    const [score, setScore] = useState(0)\n    const [previousGuess, setPreviousGuess] = useState([])\n    const navigate = useNavigate()\n    useEffect(() => {\n\n        //create the code to be guessed\n        const newCode = createCode(colors)\n        console.log(newCode)\n        setCode(translateCode(newCode))\n        const interval = setInterval(() => {\n            setTime((prevTime) => {\n                if (gameOver === true) {\n                    const score = calculateScore(prevTime, numGuesses)\n                    clearInterval(interval);\n                    //if a user is logged in, add score to their total\n                    if(currentUser.username){\n                        updateScore(currentUser, score)\n                        setScore(score)\n                    }\n                    return prevTime\n                  }\n              return prevTime + 1\n            });\n           \n          }, 1000);\n          return () => clearInterval(interval);\n    \n    }, [gameOver])\n\n    const updateScore = (currentUser, score) => {\n            updateUserById(currentUser.id, {\n                score: currentUser.score += score\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    const reset = () => {\n        // reset all states in game.jsx\n        setTime(0)\n        setNumGuesses(0)\n        setGameOver(false)\n        setScore(0)\n        setPreviousGuess([])\n    }\n    return (\n        <>\n        <div className=\"d-flex align-items-center justify-content-center flex-column \">\n                <button id=\"help\" className=\"menu-btn\" onClick={() => navigate('/')}>\n                        <span>Back</span> \n                        <MenuButtonSVG />\n                    </button>\n            <div className=\"d-flex gap-5\">\n                <h2 id=\"timer\" className=\"info\">TIMER: {time} </h2>\n                <h2 className=\"info\">GUESSES: {numGuesses}</h2>\n            </div>\n            </div>\n            {\n                score !== 0 && (\n                    <h2 className=\"info\">SCORE: {score}</h2>\n                )\n            }\n            <div id='main-container'>\n                {\n                    //code = send code to guessgrid, previousGuess = send the previous guess styles to fill the containers with so the player can see what they guessed previously, handleGameOver = when player guesses correctly we need to setGameOver to true in the game.jsx so the timer can stop and we can calculate the score, gameOver = determines whether guessgrid displays the restart button and shows the unlock button or not, numGuesses = pass the num of guesses up to game.jsx to display at top of screen, reset = reset game.jsx state and guessgrid.jsx state, currentUser = pass the user through props so it doesn't get lost in running the game\n                } \n                <GuessGrid code={code} previousGuess={previousGuess} handleGameOver={() => setGameOver(true)} gameOver={gameOver} numGuesses={() => setNumGuesses(numGuesses + 1)} reset={reset} currentUser={currentUser}></GuessGrid>\n            </div>\n        </>\n    )\n}\nexport default Game","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Game/GuessGrid.jsx",[],[],"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Menu/Menu.jsx",["77"],[],"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Menu/Leaderboard.jsx",["78"],[],"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Menu/Help.jsx",[],[],"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Forms/Login.jsx",[],[],"/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/Forms/Register.jsx",["79"],[],"import { registerUser } from \"../../services/internalApiService\"\nimport { Link, useNavigate } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport '../styles/Forms.css'\n\nconst Register = () => {\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [error, setError] = useState([])\n    const navigate = useNavigate()\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        let newUser = { username: username, password: password }\n            registerUser(newUser)\n            .then(data => navigate('/login')) \n            .catch(err => {\n                const errRes = err.response.data.error.message\n                setError(errRes)\n        })\n    }\n    \n    return (\n        <>\n        <form className='form' onSubmit={handleSubmit}>\n            <div className='control'>\n                <h1>\n                Register\n                </h1>\n            </div>\n            {\n                error && (\n                    <p className=\"text-danger\">{error}</p> \n                )\n            }\n            <div className='control block-cube block-input'>\n                <input type=\"text\" placeholder=\"Username\" className=\"\" onChange={(e) => setUsername(e.target.value)} value={username} />\n                <div className='bg-top'>\n                <div className='bg-inner'></div>\n                </div>\n                <div className='bg-right'>\n                <div className='bg-inner'></div>\n                </div>\n                <div className='bg'>\n                <div className='bg-inner'></div>\n                </div>\n            </div>\n            <div className='control block-cube block-input'>\n                <input type=\"password\" placeholder=\"Password\" onChange={(e) => setPassword(e.target.value)} value={password} />\n                <div className='bg-top'>\n                <div className='bg-inner'></div>\n                </div>\n                <div className='bg-right'>\n                <div className='bg-inner'></div>\n                </div>\n                <div className='bg'>\n                <div className='bg-inner'></div>\n                </div>\n            </div>\n            <button className='btn block-cube block-cube-hover' type='submit'>\n                <div className='bg-top'>\n                <div className='bg-inner'></div>\n                </div>\n                <div className='bg-right'>\n                <div className='bg-inner'></div>\n                </div>\n                <div className='bg'>\n                <div className='bg-inner'></div>\n                </div>\n                <div className='text'>\n                Register\n                </div>\n            </button>\n        </form>\n        <div className=\"mb-3\">\n            <div id=\"emailHelp\" className=\"form-text\">Already have an account?</div>\n            <div className=\"d-flex align-items-center justify-content-center gap-3\">\n                    <Link style={{textDecoration: \"none\", color: \"white\"}} to=\"/login\">Sign In</Link>\n                    <div id=\"emailHelp\" className=\"form-text\"> or </div>\n                    <Link style={{textDecoration: \"none\", color: \"white\"}} to=\"/\">Continue as Guest</Link>\n                </div>\n        </div>\n\n        </>\n    )\n\n}\nexport default Register","/Users/tchevier3/Desktop/Github/Code-Crackdown/client/src/components/SVGs/MenuButtonSVG.jsx",[],[],{"ruleId":"80","severity":1,"message":"81","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":19},{"ruleId":"84","severity":1,"message":"85","line":15,"column":9,"nodeType":"86","messageId":"87","endLine":34,"endColumn":10},{"ruleId":"88","severity":1,"message":"89","line":77,"column":28,"nodeType":"90","messageId":"91","endLine":77,"endColumn":30},{"ruleId":"80","severity":1,"message":"92","line":11,"column":25,"nodeType":"82","messageId":"83","endLine":11,"endColumn":39},{"ruleId":"93","severity":1,"message":"94","line":44,"column":8,"nodeType":"95","endLine":44,"endColumn":18,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"97","line":33,"column":8,"nodeType":"95","endLine":33,"endColumn":10,"suggestions":"98"},{"ruleId":"80","severity":1,"message":"99","line":1,"column":10,"nodeType":"82","messageId":"83","endLine":1,"endColumn":13},{"ruleId":"80","severity":1,"message":"100","line":3,"column":20,"nodeType":"82","messageId":"83","endLine":3,"endColumn":29},"no-unused-vars","'Leaderboard' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setCurrentUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'colors', 'currentUser', and 'numGuesses'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTime' needs the current value of 'numGuesses'.","ArrayExpression",["101"],"React Hook useEffect has missing dependencies: 'Logout' and 'currentUser'. Either include them or remove the dependency array.",["102"],"'all' is defined but never used.","'useEffect' is defined but never used.",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [colors, currentUser, gameOver, numGuesses]",{"range":"107","text":"108"},"Update the dependencies array to be: [Logout, currentUser]",{"range":"109","text":"110"},[1663,1673],"[colors, currentUser, gameOver, numGuesses]",[1050,1052],"[Logout, currentUser]"]